//Write a program to solve a 0-1 Knapsack problem using dynamic programming or branch andbound strategy.

package com.company;
import java.util.ArrayList;

public class Knapsack {
    // Function to solve the 0/1 Knapsack problem using dynamic programming
    public static int knapsack(int[] weights, int[] values, int capacity) {
        int n = weights.length;
        int[][] dp = new int[n + 1][capacity + 1];


        // Build the dynamic programming table
        for (int i = 0; i <= n; i++) {
            for (int w = 0; w <= capacity; w++) {
                if (i == 0 || w == 0) {
                    dp[i][w] = 0;
                } else if (weights[i - 1] <= w) {
                    dp[i][w] = Math.max(dp[i - 1][w], values[i - 1] + dp[i - 1][w - weights[i - 1]]);
                } else {
                    dp[i][w] = dp[i - 1][w];
                }
            }
        }

        // Find the selected items
        int[] selectedItem=new int[n+1];
        int i = n;
        int w = capacity;
        while (i > 0 && w > 0) {
            if (dp[i][w] != dp[i - 1][w]) {
                selectedItem[i]=1;
                w -= weights[i - 1];
            }
            i--;
        }

        // Print selected items
        System.out.print("Selected items\n( ");
        for (int j = 1; j <= n; j++) {
            System.out.print(selectedItem[j]+" ");
        }
        System.out.println(")");

        return dp[n][capacity];
    }

    public static void main(String[] args) {
        int[] values = {60, 100, 120};
        int[] weights = {10, 20, 30};
        int capacity = 50;

        int maxProfit = knapsack(weights, values, capacity);
        System.out.println("Maximum Profit: " + maxProfit);
    }
}


