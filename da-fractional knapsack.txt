// Write a program to solve a fractional Knapsack problem using a greedy method.

package com.company;
import java.util.Arrays;
import java.util.Comparator;

class Item {
    int weight;
    int profit;
    double ratio; // Profit-to-weight ratio

    public Item(int weight, int profit) {
        this.weight = weight;
        this.profit = profit;
        this.ratio = (double) profit / weight;
    }
}

public class FractionalKnapsack {
    public static double getMaxValue(int[] weights, int[] profits, int capacity) {
        int n = weights.length;
        Item[] items = new Item[n];

        // Create Item objects and calculate profit-to-weight ratios
        for (int i = 0; i < n; i++) {
            items[i] = new Item(weights[i], profits[i]);
        }

        // Sort items by profit-to-weight ratio in descending order
        Arrays.sort(items, Comparator.comparingDouble(item -> -item.ratio));

        double maxValue = 0; // Maximum value of the knapsack
        int currentWeight = 0; // Current weight in the knapsack

        for (Item item : items) {
            if (currentWeight + item.weight <= capacity) {
                // Take the whole item
                currentWeight += item.weight;
                maxValue += item.profit;
            } else {
                // Take a fraction of the item to fill the knapsack to capacity
                double fraction = (double) (capacity - currentWeight) / item.weight;
                maxValue += item.profit * fraction;
                break; // Knapsack is full, exit loop
            }
        }

        return maxValue;
    }

    public static void main(String[] args) {
        int[] weights = {10,20,30};
        int[] profits = {60,100,120};
        int capacity = 50;

        double maxValue = getMaxValue(weights, profits, capacity);
        System.out.println("Maximum value in the knapsack: " + maxValue);
    }
}
