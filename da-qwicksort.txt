//Write a program for analysis of quick sort by using deterministic and randomized variant.

import java.util.Arrays;
import java.util.Random;

public class QuickSortAnalysis {

    public static void main(String[] args) {
        int n = 10000; // Adjust the size of the array
        int[] arr1 = new int[n];
        int[] arr2 = new int[n];

        // Initialize both arrays with random values
        Random random = new Random();
        for (int i = 0; i < n; i++) {
            arr1[i] = arr2[i] = random.nextInt(1000);
        }

        long startTime1 = System.nanoTime();
        quickSort(arr1, 0, n - 1); // Using deterministic Quick Sort
        long endTime1 = System.nanoTime();
        long duration1 = (endTime1 - startTime1);

        long startTime2 = System.nanoTime();
        quickSortRandomized(arr2, 0, n - 1); // Using randomized Quick Sort
        long endTime2 = System.nanoTime();
        long duration2 = (endTime2 - startTime2);

        // Check if both arrays are sorted correctly
        boolean isSorted1 = isSorted(arr1);
        boolean isSorted2 = isSorted(arr2);

        System.out.println("Deterministic Quick Sort Duration: " + duration1 + " ns");
        System.out.println("Randomized Quick Sort Duration: " + duration2 + " ns");

        System.out.println("Deterministic Quick Sort is sorted: " + isSorted1);
        System.out.println("Randomized Quick Sort is sorted: " + isSorted2);
    }

    public static void quickSort(int[] arr, int low, int high) {
        if (low < high) {
            int pivotIndex = partition(arr, low, high);
            quickSort(arr, low, pivotIndex - 1);
            quickSort(arr, pivotIndex + 1, high);
        }
    }

    public static int partition(int[] arr, int low, int high) {
        int pivot = arr[high];
        int i = low - 1;

        for (int j = low; j < high; j++) {
            if (arr[j] < pivot) {
                i++;
                int temp = arr[i];
                arr[i] = arr[j];
                arr[j] = temp;
            }
        }

        int temp = arr[i + 1];
        arr[i + 1] = arr[high];
        arr[high] = temp;

        return i + 1;
    }

    public static void quickSortRandomized(int[] arr, int low, int high) {
        if (low < high) {
            int pivotIndex = randomizedPartition(arr, low, high);
            quickSortRandomized(arr, low, pivotIndex - 1);
            quickSortRandomized(arr, pivotIndex + 1, high);
        }
    }

    public static int randomizedPartition(int[] arr, int low, int high) {
        int randomIndex = low + new Random().nextInt(high - low + 1);
        int temp = arr[randomIndex];
        arr[randomIndex] = arr[high];
        arr[high] = temp;
        return partition(arr, low, high);
    }

    public static boolean isSorted(int[] arr) {
        int[] sortedArray = Arrays.copyOf(arr, arr.length);
        Arrays.sort(sortedArray);
        return Arrays.equals(arr, sortedArray);
    }
}
