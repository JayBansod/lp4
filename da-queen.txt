// Design n-Queens matrix having first Queen placed. Use backtracking to place remainingQueens to generate the final n-queenâ€˜s matrix.

package com.company;
public class EightQueens {
    private static final int N = 8; // Size of the chessboard

    // Function to print the chessboard
    private static void printBoard(int[][] board) {
        for (int i = 0; i < N; i++) {
            for (int j = 0; j < N; j++) {
                System.out.print(board[i][j] + " ");
            }
            System.out.println();
        }
        System.out.println("-------------------");
    }

    // Function to check if a Queen can be placed at board[row][col]
    private static boolean isSafe(int[][] board, int row, int col) {
        // Check the left side of this row
        for (int i = 0; i < col; i++) {
            if (board[row][i] == 1) {
                return false;
            }
        }

        // Check upper diagonal on the left side
        for (int i = row, j = col; i >= 0 && j >= 0; i--, j--) {
            if (board[i][j] == 1) {
                return false;
            }
        }

        // Check lower diagonal on the left side
        for (int i = row, j = col; i < N && j >= 0; i++, j--) {
            if (board[i][j] == 1) {
                return false;
            }
        }

        return true;
    }

    // Function to solve the N-Queens problem using backtracking
    private static boolean solveNQueens(int[][] board, int col) {
        if (col == N) {
            // All Queens are successfully placed
            printBoard(board);
            return true;
        }

        boolean res = false;
        for (int i = 0; i < N; i++) {
            if (isSafe(board, i, col)) {
                board[i][col] = 1; // Place Queen

                // Recur to place the remaining Queens
                res = solveNQueens(board, col + 1) || res;

                // If placing Queen in board[i][col] doesn't lead to a solution,
                // then remove Queen (backtrack)
                board[i][col] = 0;
            }
        }

        return res;
    }

    public static void main(String[] args) {
        int[][] board = new int[N][N];

        // Place the first Queen in the first row
        board[0][0] = 1;

        System.out.println("Solutions to the 8-Queens problem:");
        if (!solveNQueens(board, 1)) {
            System.out.println("No solution exists.");
        }
    }
}
